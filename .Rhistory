Bias=rep(0,Iter*8)
dim(Bias)=c(Iter,8)
if(div==0){
div2=1
}else if(div==0.4){
div2=5
}else if(div==0.6){
div2=10
}else{
stop("check simulation")
}
betav_true1=c(-0.5,-20,0.5,20)/div2
betav_true2=c(1.5,10,-1.5,-10)/div2
betav_true=c(betav_true1,betav_true2)
betat_ker1=c(-6.9163417,-7.9488818,-1.2082771,-1.2529627,0.3297496, -1.5281341, -2.0093063, -0.8826519, -1.3137642, -0.9211226)
betat_ker2=c(2.8485204,3.5600860, -1.3287430, -0.9033530, -2.2648251, -2.8164733, -1.2054594, -2.2011306, -1.3713944, -0.6684109)
betat_true1=betat_ker1+((betat_ker1+betat_ker2)/2-betat_ker1)*div
betat_true2=betat_ker2+((betat_ker1+betat_ker2)/2-betat_ker2)*div
betav_true1
betav_true2
499.29/3
149+8.94+8.94
get_direction<-function(){
### 外面人进来
a<- ifelse(length(out_request)>0, sum((out_request[,2]-loc)*direction>0)+
sum((out_request[,2]-loc==0)*out_request[,4]*direction>0),0)
#begin - loc =  direction     同方向外面有人要进来,有人要去接
#begin = loc and direction = direction 这层有人要去同方向
### 里面人出去
b<- ifelse(length(in_request)>0,  sum((in_request[,3]-loc)*direction>0),0)
if(a+b>0){
direction <<- direction
}else{
direction <<- -direction
}
request<<- (a+b>0)
}
inner_people_out<-function(){
# if someone out, return 1, else return 0
if(length(in_request)>0){ # 电梯里有人
request1<-which(in_request[,3]==loc) # inner people get out # 要下车的人
if(length(in_request[request1,3])>0){# if any，下车
in_request<<-in_request[-request1,,drop=FALSE]
return(1) # 有人下车
}
}
return(0)
}
outer_people_in<-function(){
# when someone get out, we need to update the original direction
#if someone get in, return 1, else return 0
request2<-which(out_request[,2]==loc & out_request[,4]==direction)
#
if(length(out_request[request2,2])>0){
in_request<<-rbind(in_request,out_request[request2,,drop=FALSE])
out_request<<-out_request[-request2,,drop=FALSE]
return(1)
}
return(0)
}
outer_people_in_all<-function(){
request2<-which(out_request[,2]==loc)
#
if(length(out_request[request2,2])>0){
in_request<<-rbind(in_request,out_request[request2,,drop=FALSE])
out_request<<-out_request[-request2,,drop=FALSE]
return(1)
}
return(0)
}
next_event<-function(){
in_event<-0
out_event<-0
new_event<-0
if(length(in_request)>0){ #最近的要下车的人
in_event<-which.min( (in_request[,3]-loc)*direction )
in_event<-(in_request[in_event,3]-loc)*direction
}
if(length(out_request)>0){#最近的要上车的人
a<-(out_request[,2]-loc)*direction
b<-a[which( a>0 )]
if(length(b)!=0){
out_event<- min(b)#(min(b)-loc)/direction
}
}
if( sum(which(x[,1]>t0))!=0 ){ #future happening
new_event<-which(x[,1]>t0)
new_event<-min(x[new_event,1])-t0
}
in_event<-ifelse(in_event==0,Inf,in_event)
out_event<-ifelse(out_event==0,Inf,out_event)
new_event<-ifelse(new_event==0,Inf,new_event)
return(    max( floor(min(c(in_event,out_event,new_event)))  ,1)  )
}
elevator1<-function(X,first_loc,first_t){
x<<-X
direction<<- 1
loc<<-first_loc # 1
t0<<-first_t    # 0
in_request<<-vector()
out_request<<-vector()
final_time<-max(x[,1])
result<<-vector()
request<<-0
######## find the first people
t0<<- x[which(x[,1,drop=FALSE]>=t0)[1],1]
while( 1 ){
#read  the new request
request1<-which((x[,1]<=t0)&(x[,1]>t0-1)  )
out_request<<-rbind(out_request,x[request1,,drop=FALSE])
if(length(request1)!=0){
x<<-x[-request1,,drop=FALSE]
}
# x -> out_request
### x t = 1, 1->2, t0 = 2
### people 1.5s, record
### people 3s, not recorded
# people get in and out
# people inside out 判断是否有人下车
whetherstop<- inner_people_out()
#如果有人下车->停一秒->多记录一秒
if(whetherstop >0){
# when elevator stops, there can be new request
request1<-which((x[,1]<=t0+1)&(x[,1]>t0)  )
if(length(request1)!=0){
out_request<<-rbind(out_request,x[request1,,drop=FALSE])
x<<-x[-request1,,drop=FALSE]
}
outer_people_in_all()  # 外面的人"都"进来
t0<<- t0 +1
### 是否要get direction？
get_direction()
}
#如果无人下车
if(whetherstop==0){
get_direction()
whetherstop<-  outer_people_in() # 有选择性上车
if(whetherstop >0){
# when elevator stops, there can be new request
request1<-which((x[,1]<=t0+1)&(x[,1]>t0)  )
if(length(request1)!=0){
out_request<<-rbind(out_request,x[request1,,drop=FALSE])
x<<-x[-request1,,drop=FALSE]
outer_people_in_all()
}
t0<<- t0 +1
}else{
tt<- next_event()
loc<<-loc + direction * tt
t0<<-t0 + tt
# tt<- 1
# loc<<-loc + direction * tt
# t0<<-t0 + tt
}
}
result<<-rbind(result,c(t0,direction,loc))
## judge whether end
if( (t0>final_time)&&length(in_request)==0&&length(out_request)==0){
return(t0)
}
## recur !!!
if(length(in_request)==0 && length(out_request)==0){
x<<-x[which(x[,1,drop=FALSE]>=t0), ,drop=FALSE]
t0<<- x[which(x[,1,drop=FALSE]>t0)[1],1]
}
result
x
in_request
out_request
}
}
elevator<-function(x){
# sort people by time
x<-x[order(x[,1]),,drop=FALSE]
#x = cbind(x , up or down)
x<-cbind(x,sign(-x[,2]+x[,3]))
#first location , time of begin
return(elevator1(x,1,0))
}
elevator(matrix)
elevator(matrix(c(1,1,2),1,3))
elevator(matrix(c(1,1.5,2,3,3,2),2,3))
(c(1,2,3)-2)==0
if(1){print("***")}
if(0){print("***")}
if(2){print("***")}
isTRUE(T)
(6-5)*1
(8-5)*1
(8-5)*-1
floor(1,3,1)
floor(1,3)
floor(1.3)
floor(2.3)
max(c(1,1,2,3),1)
max(c(1,1,2,3,3),1)
floor(0.4)
a=c(1,2,3)
a[c(1,1,1,3,2,2)]
50608*3/2
50608*2
library(shiny)
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
library(shiny)
library(devtools)
library(shiny)
library(devtools)
load_all("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/new_BRIGHT/BRIGHT/")
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Shiny.R')
runApp('Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
setwd("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/new_BRIGHT/BRIGHT/")
library(devtools)
library(pkgdown)
load_all()
Tind <- "GWAS"
Tss <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train.GWAS",header = T)
head(Tss)
Pind <- c("GWAS")
Pss <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR.GWAS",header = T)
head(Pss)
Tref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train"
Pref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR"
dat=PreprocessS(Tss, Tind, Tref, Pss, Pind, Pref, TLDblocks=c("SAS.hg19"), PLDblocks=c("EUR.hg19"),TN=100,PN=11514)
#eta_vec=c(0,exp(seq(log(0.1),log(10),length.out=20)))
out <- BRIGHTs(data = dat)
Eta_curve.plot(out,valid.type = "AIC")
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
head(dat)
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
out$Best_eta_AIC
out$`0`
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
Eta_curve.plot(out,valid.type = "AIC")
plot(Eta_curve.plot(out,valid.type = "AIC"))
Eta_curve.plot(out,valid.type = "AIC")
Eta_curve.plot(out,valid.type = "AIC")
Eta_curve.plot(out,valid.type = "AIC")
Valipheno=read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2_phe.fam")
Valigeno="~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2"
Val=Valid.Ind(out,Valipheno,Valigeno)
Eta_curve.plot(Val,valid.type = "Ind")
Solution.path(Val,out,highlight=c(25,50,70,92),criteria="PD")
Eta_curve.plot(out,valid.type = "AIC")
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
out$Beta_BRIGHT_AIC
out$AIC
dat$Tss
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
dat$Tss
cbind("aa"=c(1,2,3,4))
cbind("aa"=c(1,2,3,4),"bb"=c(6,7,8,9))
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
library(devtools)
library(pkgdown)
setwd("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/new_BRIGHT/BRIGHT/")
library(devtools)
library(pkgdown)
load_all()
Tind <- "GWAS"
Tss <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train.GWAS",header = T)
head(Tss)
Pind <- c("GWAS")
Pss <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR.GWAS",header = T)
head(Pss)
Tref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train"
Pref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR"
dat=PreprocessS(Tss, Tind, Tref, Pss, Pind, Pref, TLDblocks=c("SAS.hg19"), PLDblocks=c("EUR.hg19"),TN=100,PN=11514)
#eta_vec=c(0,exp(seq(log(0.1),log(10),length.out=20)))
out <- BRIGHTs(data = dat)
Eta_curve.plot(out,valid.type = "AIC")
Valipheno=read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2_phe.fam")
Valigeno="~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2"
Val=Valid.Ind(out,Valipheno,Valigeno)
Eta_curve.plot(Val,valid.type = "Ind")
Solution.path(Val,out,highlight=c(25,50,70,92),criteria="PD")
ValiCorr=read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2.Corr",header = T)
ValiRef="~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_LD"
Val.Sum <- Valid.Sum(out, ValiCorr, ValiRef)
Eta_curve.plot(Val.Sum,valid.type = "Sum")
Solution.path(Val.Sum,out,highlight=c(25,50,70,92),criteria="APD")
Testpheno=read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2_phe_test.fam")
Testgeno="~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2"
Tst <- Test.Ind(Val, Testpheno, Testgeno)
Density.plot(Tst,Pct=0.9,criteria = "R2")
ROC.plot(Tst,Pct=0.9,criteria = "R2")
ROC.plot(Tst,Pct=0.9,criteria = "R2")
ROC.plot(Tst,Pct=0.9,criteria = "R2")
#BRIGHTi
Tgeno <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train"
Tpheno <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train_phe.fam")
Pind=c("GWAS")
Pss <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR.GWAS",header = T)
head(Pss)
Pref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR"
dat <- PreprocessI(Tpheno = Tpheno, Tgeno = Tgeno, Pss = Pss, Pind = Pind, Pref=Pref, PLDblocks="EUR.hg19", PN=11514)
out <- BRIGHTi(dat)
library(BEDMatrix)
out <- BRIGHTi(dat)
data=dat
KG=data$KG
gene_bed = BEDMatrix(data$geno_dir)
gene_bed=as.matrix(gene_bed)
Y=data$Tpheno[,3]
p=ncol(gene_bed)
if(is.na(group)[1]){
group=1:p
}
if(is.na(sum(m))){
m=sqrt(table(group[group!=0]))
}
m=NA
group=NA
if(is.na(group)[1]){
group=1:p
}
if(is.na(sum(m))){
m=sqrt(table(group[group!=0]))
}
if(is.null(data$Pss$Coef)){
warning("dat$Pss$Coef not found avoiding the usage of prior data")
Beta_prior=rep(0,p)
eta=0
}else{
Beta_prior=data$Pss$Coef
}
#yy <- newY(Y, family)
yy <- (Y-mean(Y))/sd(Y)
XG <- newXG(gene_bed, group, m, 1, FALSE)
K <- as.integer(table(XG$g))
K0 <- as.integer(if (min(XG$g)==0) K[1] else 0)
K1 <- as.integer(if (min(XG$g)==0) cumsum(K) else c(0, cumsum(K)))
yy=t(t(yy))
if(is.na(lambda)){
#lambda <- exp(seq(from=log(max(as.vector(cov(yy,XG$X)))),to=log(lambda.min),length.out=nlambda))
Lmd=MaxLambdai(yy, tilde_beta=t(t(Beta_prior)), XG$X, t(t(K1)), m=t(t(rep(1,p))), K0, tau=tau, eta=0, alpha=alpha, eps=eps,max_iter=max_iter)
lambda.max=Lmd$lambda.max
lambda <- exp(seq(log(lambda.max), log(lambda.min*lambda.max), length=nlambda))
}
lambda=NA
if(is.na(lambda)){
#lambda <- exp(seq(from=log(max(as.vector(cov(yy,XG$X)))),to=log(lambda.min),length.out=nlambda))
Lmd=MaxLambdai(yy, tilde_beta=t(t(Beta_prior)), XG$X, t(t(K1)), m=t(t(rep(1,p))), K0, tau=tau, eta=0, alpha=alpha, eps=eps,max_iter=max_iter)
lambda.max=Lmd$lambda.max
lambda <- exp(seq(log(lambda.max), log(lambda.min*lambda.max), length=nlambda))
}
tau=1/3
alpha=1
gamma=ifelse(penalty == "grSCAD", 4, 3)
eps=0.01
max_iter=1000000
dfmax=5000
gmax=5000
penalty=1
gamma=ifelse(penalty == 1, 4, 3)
if(is.na(lambda)){
#lambda <- exp(seq(from=log(max(as.vector(cov(yy,XG$X)))),to=log(lambda.min),length.out=nlambda))
Lmd=MaxLambdai(yy, tilde_beta=t(t(Beta_prior)), XG$X, t(t(K1)), m=t(t(rep(1,p))), K0, tau=tau, eta=0, alpha=alpha, eps=eps,max_iter=max_iter)
lambda.max=Lmd$lambda.max
lambda <- exp(seq(log(lambda.max), log(lambda.min*lambda.max), length=nlambda))
}
nlambda=100
if(is.na(lambda)){
#lambda <- exp(seq(from=log(max(as.vector(cov(yy,XG$X)))),to=log(lambda.min),length.out=nlambda))
Lmd=MaxLambdai(yy, tilde_beta=t(t(Beta_prior)), XG$X, t(t(K1)), m=t(t(rep(1,p))), K0, tau=tau, eta=0, alpha=alpha, eps=eps,max_iter=max_iter)
lambda.max=Lmd$lambda.max
lambda <- exp(seq(log(lambda.max), log(lambda.min*lambda.max), length=nlambda))
}
lambda.min=0.0001
if(is.na(lambda)){
#lambda <- exp(seq(from=log(max(as.vector(cov(yy,XG$X)))),to=log(lambda.min),length.out=nlambda))
Lmd=MaxLambdai(yy, tilde_beta=t(t(Beta_prior)), XG$X, t(t(K1)), m=t(t(rep(1,p))), K0, tau=tau, eta=0, alpha=alpha, eps=eps,max_iter=max_iter)
lambda.max=Lmd$lambda.max
lambda <- exp(seq(log(lambda.max), log(lambda.min*lambda.max), length=nlambda))
}
if(eta[1]!=0){
eta_vec=c(0,eta)
}else{
eta_vec=eta
}
eta=c(0.5,1)
if(eta[1]!=0){
eta_vec=c(0,eta)
}else{
eta_vec=eta
}
out=list()
AIC=c()
out[["lambda"]]=lambda
out[["eta_vec"]]=eta_vec
for(eta in eta_vec){
rst_BRIGHTi=gdfit_gaussiani(yy, XG$X, t(t(Beta_prior)), t(t(lambda)), t(t(K1)), m=t(t(m)), K0, penalty, tau,eta, alpha, gamma,eps,max_iter, dfmax, gmax, user)
AIC=cbind(AIC,2*(rst_BRIGHTi$dev2*nrow(XG$X)+colSums(as.matrix(rst_BRIGHTi$Beta)!=0)/(1+eta)))
out[[as.character(eta)]]=rst_BRIGHTi
}
user=T
for(eta in eta_vec){
rst_BRIGHTi=gdfit_gaussiani(yy, XG$X, t(t(Beta_prior)), t(t(lambda)), t(t(K1)), m=t(t(m)), K0, penalty, tau,eta, alpha, gamma,eps,max_iter, dfmax, gmax, user)
AIC=cbind(AIC,2*(rst_BRIGHTi$dev2*nrow(XG$X)+colSums(as.matrix(rst_BRIGHTi$Beta)!=0)/(1+eta)))
out[[as.character(eta)]]=rst_BRIGHTi
}
dim(Tss)
load_all()
#BRIGHTi
Tgeno <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train"
Tpheno <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train_phe.fam")
Pind=c("GWAS")
Pss <- read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR.GWAS",header = T)
head(Pss)
Pref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR"
dat <- PreprocessI(Tpheno = Tpheno, Tgeno = Tgeno, Pss = Pss, Pind = Pind, Pref=Pref, PLDblocks="EUR.hg19", PN=11514)
out <- BRIGHTi(dat)
getwd()
save(dat,file="../../example_2/Ind_rst.RData")
Eta_curve.plot(out,valid.type = "AIC")
Valipheno=read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2_phe.fam")
Valigeno="~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2"
Val=Valid.Ind(out,Valipheno,Valigeno)
out[["Prior"]]=Beta_prior
Val=Valid.Ind(out,Valipheno,Valigeno)
Eta_curve.plot(Val,valid.type = "Ind")
Solution.path(Val,out,highlight=c(25,50,70,92),criteria="PD")
ValiCorr=read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2.Corr",header = T)
ValiRef="~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_LD"
Val.Sum <- Valid.Sum(out, ValiCorr, ValiRef)
Eta_curve.plot(Val.Sum,valid.type = "Sum")
Solution.path(Val.Sum,out,highlight=c(25,50,70,92),criteria="APD")
Testpheno=read.table("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2_phe_test.fam")
Testgeno="~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS2"
Tst <- Test.Ind(Val, Testpheno, Testgeno)
Density.plot(Tst,Pct=0.9,criteria = "R2")
ROC.plot(Tst,Pct=0.9,criteria = "R2")
ROC.plot(Tst,Pct=0.9,criteria = "R2")
set.seed(seed)
seed=1
set.seed(seed)
KG=data$KG
gene_bed = BEDMatrix(data$geno_dir)
gene_bed=as.matrix(gene_bed)
Y=data$Tpheno[,3]
TN=length(Y)
TN
folds <- cut(seq(1,TN),breaks=fold,labels=FALSE)
fold=5
fold
folds
folds <- cut(seq(1,TN),breaks=fold,labels=FALSE)
folds
TN=101
folds <- cut(seq(1,TN),breaks=fold,labels=FALSE)
folds
summary(as.factor(folds))
dim(gene_bed)
library(shiny); runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
library(shiny)
library(devtools)
load_all("~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/new_BRIGHT/BRIGHT/")
Tref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/SAS1_train"
Pref <- "~/Desktop/research/Kevin He/PRS/Rewrite_Lassosum/example_2/EUR"
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
runApp('~/Desktop/research/Kevin He/PRS/Rshiny/Shiny.R')
