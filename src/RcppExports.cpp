// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Norm
double Norm(Eigen::MatrixXd x, int p);
RcppExport SEXP _BRIGHT_Norm(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Norm(x, p));
    return rcpp_result_gen;
END_RCPP
}
// S
double S(double z, double l);
RcppExport SEXP _BRIGHT_S(SEXP zSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(S(z, l));
    return rcpp_result_gen;
END_RCPP
}
// Ff
double Ff(double z, double l1, double l2, double gamma);
RcppExport SEXP _BRIGHT_Ff(SEXP zSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(Ff(z, l1, l2, gamma));
    return rcpp_result_gen;
END_RCPP
}
// Fs
double Fs(double z, double l1, double l2, double gamma);
RcppExport SEXP _BRIGHT_Fs(SEXP zSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(Fs(z, l1, l2, gamma));
    return rcpp_result_gen;
END_RCPP
}
// LD
Eigen::MatrixXd LD(Eigen::MatrixXd chr, Eigen::MatrixXd pos, Eigen::MatrixXd LDB);
RcppExport SEXP _BRIGHT_LD(SEXP chrSEXP, SEXP posSEXP, SEXP LDBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type chr(chrSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type pos(posSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type LDB(LDBSEXP);
    rcpp_result_gen = Rcpp::wrap(LD(chr, pos, LDB));
    return rcpp_result_gen;
END_RCPP
}
// Sigma_LD
int Sigma_LD(Eigen::MatrixXd& X, Eigen::SparseMatrix<double>& Sig, Eigen::MatrixXi& blk, double tau, int P, int N);
RcppExport SEXP _BRIGHT_Sigma_LD(SEXP XSEXP, SEXP SigSEXP, SEXP blkSEXP, SEXP tauSEXP, SEXP PSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type blk(blkSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma_LD(X, Sig, blk, tau, P, N));
    return rcpp_result_gen;
END_RCPP
}
// gd_gaussian
void gd_gaussian(Eigen::MatrixXd& a, Eigen::MatrixXd& b, Eigen::SparseMatrix<double>& Sig, Eigen::MatrixXd& K1, Eigen::MatrixXd& Xtbt, Eigen::MatrixXd& XtY, Eigen::MatrixXd& df, int& l, int& P, int& g, int& penalty, double& lam1, double& lam2, double& gamma, double& eta, double& maxChange);
RcppExport SEXP _BRIGHT_gd_gaussian(SEXP aSEXP, SEXP bSEXP, SEXP SigSEXP, SEXP K1SEXP, SEXP XtbtSEXP, SEXP XtYSEXP, SEXP dfSEXP, SEXP lSEXP, SEXP PSEXP, SEXP gSEXP, SEXP penaltySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP maxChangeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Xtbt(XtbtSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int& >::type l(lSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< int& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double& >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double& >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double& >::type maxChange(maxChangeSEXP);
    gd_gaussian(a, b, Sig, K1, Xtbt, XtY, df, l, P, g, penalty, lam1, lam2, gamma, eta, maxChange);
    return R_NilValue;
END_RCPP
}
// MaxLambda
List MaxLambda(Eigen::MatrixXd XtY, Eigen::MatrixXd tilde_beta, Eigen::MatrixXd& X, Eigen::MatrixXd K1, Eigen::MatrixXd m, Eigen::MatrixXi& blk, int K0, double tau, double eta, double alpha, double eps, int max_iter);
RcppExport SEXP _BRIGHT_MaxLambda(SEXP XtYSEXP, SEXP tilde_betaSEXP, SEXP XSEXP, SEXP K1SEXP, SEXP mSEXP, SEXP blkSEXP, SEXP K0SEXP, SEXP tauSEXP, SEXP etaSEXP, SEXP alphaSEXP, SEXP epsSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type m(mSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type blk(blkSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxLambda(XtY, tilde_beta, X, K1, m, blk, K0, tau, eta, alpha, eps, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// gdfit_gaussian
List gdfit_gaussian(Eigen::MatrixXd XtY, Eigen::MatrixXd tilde_beta, Eigen::MatrixXd& X, Eigen::MatrixXd lambda, Eigen::MatrixXd K1, Eigen::MatrixXd m, Eigen::MatrixXi& blk, int K0, int penalty, double tau, double eta, double alpha, double gamma, double eps, int max_iter, int dfmax, int gmax, bool user);
RcppExport SEXP _BRIGHT_gdfit_gaussian(SEXP XtYSEXP, SEXP tilde_betaSEXP, SEXP XSEXP, SEXP lambdaSEXP, SEXP K1SEXP, SEXP mSEXP, SEXP blkSEXP, SEXP K0SEXP, SEXP penaltySEXP, SEXP tauSEXP, SEXP etaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP dfmaxSEXP, SEXP gmaxSEXP, SEXP userSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type XtY(XtYSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type m(mSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXi& >::type blk(blkSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type gmax(gmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type user(userSEXP);
    rcpp_result_gen = Rcpp::wrap(gdfit_gaussian(XtY, tilde_beta, X, lambda, K1, m, blk, K0, penalty, tau, eta, alpha, gamma, eps, max_iter, dfmax, gmax, user));
    return rcpp_result_gen;
END_RCPP
}
// gd_gaussiani
void gd_gaussiani(Eigen::MatrixXd& a, Eigen::MatrixXd& b, Eigen::MatrixXd& K1, Eigen::MatrixXd& X, Eigen::MatrixXd& Yt, Eigen::MatrixXd& df, int& l, int& P, int& g, int& penalty, double& lam1, double& lam2, double& gamma, double& eta, double& maxChange);
RcppExport SEXP _BRIGHT_gd_gaussiani(SEXP aSEXP, SEXP bSEXP, SEXP K1SEXP, SEXP XSEXP, SEXP YtSEXP, SEXP dfSEXP, SEXP lSEXP, SEXP PSEXP, SEXP gSEXP, SEXP penaltySEXP, SEXP lam1SEXP, SEXP lam2SEXP, SEXP gammaSEXP, SEXP etaSEXP, SEXP maxChangeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type a(aSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type Yt(YtSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int& >::type l(lSEXP);
    Rcpp::traits::input_parameter< int& >::type P(PSEXP);
    Rcpp::traits::input_parameter< int& >::type g(gSEXP);
    Rcpp::traits::input_parameter< int& >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double& >::type lam1(lam1SEXP);
    Rcpp::traits::input_parameter< double& >::type lam2(lam2SEXP);
    Rcpp::traits::input_parameter< double& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double& >::type maxChange(maxChangeSEXP);
    gd_gaussiani(a, b, K1, X, Yt, df, l, P, g, penalty, lam1, lam2, gamma, eta, maxChange);
    return R_NilValue;
END_RCPP
}
// MaxLambdai
List MaxLambdai(Eigen::MatrixXd Y, Eigen::MatrixXd tilde_beta, Eigen::MatrixXd& X, Eigen::MatrixXd K1, Eigen::MatrixXd m, int K0, double tau, double eta, double alpha, double eps, int max_iter);
RcppExport SEXP _BRIGHT_MaxLambdai(SEXP YSEXP, SEXP tilde_betaSEXP, SEXP XSEXP, SEXP K1SEXP, SEXP mSEXP, SEXP K0SEXP, SEXP tauSEXP, SEXP etaSEXP, SEXP alphaSEXP, SEXP epsSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(MaxLambdai(Y, tilde_beta, X, K1, m, K0, tau, eta, alpha, eps, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// gdfit_gaussiani
List gdfit_gaussiani(Eigen::MatrixXd Y, Eigen::MatrixXd& X, Eigen::MatrixXd tilde_beta, Eigen::MatrixXd lambda, Eigen::MatrixXd K1, Eigen::MatrixXd m, int K0, int penalty, double tau, double eta, double alpha, double gamma, double eps, int max_iter, int dfmax, int gmax, bool user);
RcppExport SEXP _BRIGHT_gdfit_gaussiani(SEXP YSEXP, SEXP XSEXP, SEXP tilde_betaSEXP, SEXP lambdaSEXP, SEXP K1SEXP, SEXP mSEXP, SEXP K0SEXP, SEXP penaltySEXP, SEXP tauSEXP, SEXP etaSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP dfmaxSEXP, SEXP gmaxSEXP, SEXP userSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type tilde_beta(tilde_betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type K0(K0SEXP);
    Rcpp::traits::input_parameter< int >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< int >::type dfmax(dfmaxSEXP);
    Rcpp::traits::input_parameter< int >::type gmax(gmaxSEXP);
    Rcpp::traits::input_parameter< bool >::type user(userSEXP);
    rcpp_result_gen = Rcpp::wrap(gdfit_gaussiani(Y, X, tilde_beta, lambda, K1, m, K0, penalty, tau, eta, alpha, gamma, eps, max_iter, dfmax, gmax, user));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP maxgrad(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP maxprod(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP standardize(SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_BRIGHT_Norm", (DL_FUNC) &_BRIGHT_Norm, 2},
    {"_BRIGHT_S", (DL_FUNC) &_BRIGHT_S, 2},
    {"_BRIGHT_Ff", (DL_FUNC) &_BRIGHT_Ff, 4},
    {"_BRIGHT_Fs", (DL_FUNC) &_BRIGHT_Fs, 4},
    {"_BRIGHT_LD", (DL_FUNC) &_BRIGHT_LD, 3},
    {"_BRIGHT_Sigma_LD", (DL_FUNC) &_BRIGHT_Sigma_LD, 6},
    {"_BRIGHT_gd_gaussian", (DL_FUNC) &_BRIGHT_gd_gaussian, 16},
    {"_BRIGHT_MaxLambda", (DL_FUNC) &_BRIGHT_MaxLambda, 12},
    {"_BRIGHT_gdfit_gaussian", (DL_FUNC) &_BRIGHT_gdfit_gaussian, 18},
    {"_BRIGHT_gd_gaussiani", (DL_FUNC) &_BRIGHT_gd_gaussiani, 15},
    {"_BRIGHT_MaxLambdai", (DL_FUNC) &_BRIGHT_MaxLambdai, 11},
    {"_BRIGHT_gdfit_gaussiani", (DL_FUNC) &_BRIGHT_gdfit_gaussiani, 17},
    {"maxgrad",     (DL_FUNC) &maxgrad,     4},
    {"maxprod",     (DL_FUNC) &maxprod,     4},
    {"standardize", (DL_FUNC) &standardize, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BRIGHT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
