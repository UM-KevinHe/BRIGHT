// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// norm
double norm(Eigen::MatrixXd x, int p);
RcppExport SEXP _BRIGHT_norm(SEXP xSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(norm(x, p));
    return rcpp_result_gen;
END_RCPP
}
// S
double S(double z, double l);
RcppExport SEXP _BRIGHT_S(SEXP zSEXP, SEXP lSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type l(lSEXP);
    rcpp_result_gen = Rcpp::wrap(S(z, l));
    return rcpp_result_gen;
END_RCPP
}
// F
double F(double z, double l1, double l2, double gamma);
RcppExport SEXP _BRIGHT_F(SEXP zSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(F(z, l1, l2, gamma));
    return rcpp_result_gen;
END_RCPP
}
// Fs
double Fs(double z, double l1, double l2, double gamma);
RcppExport SEXP _BRIGHT_Fs(SEXP zSEXP, SEXP l1SEXP, SEXP l2SEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(Fs(z, l1, l2, gamma));
    return rcpp_result_gen;
END_RCPP
}
// Sigma
int Sigma(Eigen::MatrixXd& X, Eigen::SparseMatrix<double>& Sig, double tau, int P, int N);
RcppExport SEXP _BRIGHT_Sigma(SEXP XSEXP, SEXP SigSEXP, SEXP tauSEXP, SEXP PSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double>& >::type Sig(SigSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma(X, Sig, tau, P, N));
    return rcpp_result_gen;
END_RCPP
}
// Sigma_test
Eigen::SparseMatrix<double> Sigma_test(Eigen::MatrixXd& X, double tau, int P, int N);
RcppExport SEXP _BRIGHT_Sigma_test(SEXP XSEXP, SEXP tauSEXP, SEXP PSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(Sigma_test(X, tau, P, N));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_hello_world
List rcpp_hello_world();
RcppExport SEXP _BRIGHT_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BRIGHT_norm", (DL_FUNC) &_BRIGHT_norm, 2},
    {"_BRIGHT_S", (DL_FUNC) &_BRIGHT_S, 2},
    {"_BRIGHT_F", (DL_FUNC) &_BRIGHT_F, 4},
    {"_BRIGHT_Fs", (DL_FUNC) &_BRIGHT_Fs, 4},
    {"_BRIGHT_Sigma", (DL_FUNC) &_BRIGHT_Sigma, 5},
    {"_BRIGHT_Sigma_test", (DL_FUNC) &_BRIGHT_Sigma_test, 4},
    {"_BRIGHT_rcpp_hello_world", (DL_FUNC) &_BRIGHT_rcpp_hello_world, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_BRIGHT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
